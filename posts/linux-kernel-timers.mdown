<!--
Categories:
  - linux
Tags:
  - linux
  - kernel
  - timer
-->

## References ##

- [1]   [http://www.xml.com/ldd/chapter/book/ch06.html#t5](http://www.xml.com/ldd/chapter/book/ch06.html#t5)
- [2]   [http://www.makelinux.net/ldd3/chp-7-sect-1](http://www.makelinux.net/ldd3/chp-7-sect-1)
- [3]   [http://cespc1.kumoh.ac.kr/~juyoon/lecture/osd/2006/osd04.pdf](http://cespc1.kumoh.ac.kr/~juyoon/lecture/osd/2006/osd04.pdf)
- [4]   Timekeeping in VMware Virtual Machines (VMware ESX 4.0/ESXi 4.0, VMware Workstation 7.0).


## Overview ##

- Kernel has 2 main timers:

### 1. Global Timer ###

- In the chipset.
- Generates a periodic event (for managing time of day).


### 2. CPU Timer ###

- Used to schedule events kernel wants to happen at a specified time in the future.
- Implemented using periodic timer interrupts on each CPU.
- Used to:
  - Update various times (system time, time since startup etc)
  - Manage timeslice of current process.
  - Update resource usage statistics.
  - Check software timers.

## Clock Circuits ##

- Real Time Clock (RTC)
- Time Stamp Counter (TSC)
- Programmable Interval Timer (PIT)
- CPU Local (APIC) Timers
- High Precision Event Timer (HPET)
- ACPI Power Management Timer (ACPI PMT)

### Overview ###

- Reference [4]

        Oscillator
           |
           \/
        Counter ---------|
           /\            |
            | <----------|
         Counter input   |
                         |
         Interrupt <------
            |
           \/

#### Oscillator ####

- Provides fixed input frequency to tier.

#### Counter ####

- Counts down one unit for each cycle of the oscillator.
- When it reaches 0, generates output signal that generates interrupt.
- Counter sometimes readable by OS and can have various setups (e.g. counting down from some value, being able to be set by the OS to some value etc)

### TSC ###

- Receives a clock signal on an input pin, and increases a 64-bit counter at each signal (i.e. the TSC register).


Ref: [http://www.gossamer-threads.com/lists/linux/kernel/917769](http://www.gossamer-threads.com/lists/linux/kernel/917769)

    "Performance. TSC access is extremly fast as it is a per CPU
    register. HPET is a chipset device and scales bad when multiple CPUs
    try to access it simultanously as the access is serialized in
    hardware. Even on a UP system the access overhead is somewhere in the
    range of factor 100."

### Programmable Interval Timer (PIT) [3]

- Oldest timer.
- Issues timer interrupt at fixed frequency (specified in kernel).
- Uses a 16-bit counter
- Kernel Variables/Macros

  - `tick_nsec` 
    - Tick length in nanoseconds. 
    - 999 848 nanoseconds (about 1000.15 Hz)
  - `HZ`
    - Approximate number of timer interrupts per second
  - `CLOCK_TICK_RATE`
    - 1 193 182 (8254 chip's frequency)
  - `LATCH`
    - Round `CLOCK_TICK_RATE/HZ`
  - `init_IRQ()`
    - 100HZ

### CMOS RTC ###

- Older timer.
- Part of battery backed device used in the BIOS.
- Has a continuously running time of day clock which can be read to the nearest second.
- Also has a timer that can generate interrupts.

### CPU Local (ACPI) Timers

- Integrated into the processor chip.
- Input frequency generated generated from processors Front Side Bus (FSB)
- Provided by local APIC (Advanced Programmable Interrupt Controller).
- Similar to PIT (i.e. interrupt based), but more accurate.
- 32 bit counter.
- Can be difficult for the software to determine input frequency.

### ACPI Timer ###

- Additional timer (required as part of the ACPI specification).
- aka Power Management (PM) timer or chipset timer.
- 24 bit counter that increments 3 times slower than the PIT frequency (3.57 MHz).
- Also, slow to read!

### TSC ###

- Timestamp Counter.
- Found in Pentium and some newer processors.
- Cannot generate interrupts, instead can be read in software by the `rdtsc` instruction.
> "By far the finest grained, widest and most convenient timer device to access." [4]
- Not possible for software to determine input frequency.

### HPET

Ref: [http://blog.fpmurphy.com/2009/07/linux-hpet-support.html](http://blog.fpmurphy.com/2009/07/linux-hpet-support.html)

- Kernel must support ACPI.
- Has one central timer and multiple timers, each with a timeout register, that is compared with the central counter.
- When a timeout matches, the corresponding timer fires.
> "The HPET has a few drawbacks. The specification does not require the timer to be particularly fine grained, to have low drift or to be fast to read." [4]
> "A drawback of the general design is that setting a timeout races with the counter itself." [4]

## Kernel Internals

### Timer Interrupt

- Asynchronous.
- Generated by system's timing hardware at regular intervals.
- Used to update the kernel's internal timers.
- Interval set by kernel, default on modern systems is:

        # cat /boot/config-`uname -r` |grep CONFIG_HZ
        # CONFIG_HZ_100 is not set
        # CONFIG_HZ_250 is not set
        CONFIG_HZ_1000=y
        CONFIG_HZ=1000

        # cat /boot/config-`uname -r` |grep HIGH_RES_TIMERS

- Every time a timer interrupt occurs, value of the `jiffies` variable is incremented.


### `jiffies`

- Declared in `<linux/sched.h>` as an `unsigned long volatile`.
- Initialised to 0 when system boots.
- Number of clock ticks since the computer was turned on.

#### Using `jiffies`

- From [2]

        #include <linux/jiffies.h>
        unsigned long j, stamp_1, stamp_half, stamp_n;
        
        j = jiffies;                      /* read the current value */
        stamp_1    = j + HZ;              /* 1 second in the future */
        stamp_half = j + HZ/2;            /* half a second */
        stamp_n    = j + n * HZ / 1000;   /* n milliseconds */

#### Problems with `jiffies`

- Ticks may be lost, see [http://www.gossamer-threads.com/lists/linux/kernel/494604](http://www.gossamer-threads.com/lists/linux/kernel/494604)
  - Conclusions, for VM's use `timer=pit` to turn off the algorithms used to determine whether ticks are lost.

### Specifying the clocksource on Linux ##

        # cat /sys/devices/system/clocksource/clocksource0/available_clocksource
        jiffies

### Timers and NTPD ###

- `ntpd` uses `adjtimex()` to adjust the System Clock at specified (by the NTP algorithm) intervals.
  - i.e. the internal `xtime` data structure.
    - `xtime` stores the current time and date as a `struct timespec` which contains:
      - `tv_sec` - Epoch seconds.
      - `tv_nsec` - Number of nanoseconds that have elapsed within the last second.
  - Depending on whether or not it is configured, the kernel may write the time to the RTC.
